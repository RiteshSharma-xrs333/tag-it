(function (w) {
	/**
	 * Default Configuraiton for the plugin.
	 * @type {Object}
	 */
	var _defaultConf = {
		container: document.body,
		burst : true,
		breakAt: '|'
	};
	var _updatedConf = {};

	/**
	 * Plugin Entry point
	 * @param  {Object} prefs User Defined Props, `_defaultConf` will be
	 * overridden by `prefs`
	 * @return {Object}       Plugin References, references of all the elements
	 * and data created by the plugin.
	 */
	w.tag= function (prefs) {
		return init(prefs);
	}

	/**
	 * Initiates the plugin, responsible for
	 *   - HTML Code generation
	 *   - Override default configurations
	 *   - Event binding for tags and input
	 *
	 * @param  {Object} prefs User defined preferences
	 * @return {Object}       References of elements generated by plugin
	 */
	function init(prefs) {
		var initialElements;

		_setConfs(prefs);
		initialElements= generateInitialElements();
		_bindInitialEvents();

		return initialElements;
	}

	/**
	 * Override default configurations by user defined configurations
	 * @param {Object|undefined} prefs Userd defined configuraitons
	 */
	function _setConfs(prefs) {
		prefs = prefs || {};

		for(var i in _defaultConf){
			if(!prefs[i]){
				prefs[i]= _defaultConf[i];
			}
		}
		_updatedConf= prefs;

		_checkElem(_updatedConf.container)
			? null
			: _updatedConf.container = _defaultConf.container
	}

	/**
	 * Generate Inital HTML, generates:
	 *   - text input in the container
	 *   - dummy tag
	 *   - empty `ul`, will be used to append the tags late on
	 */
	function generateInitialElements() {
		var cont= _updatedConf.container;
		cont.className += ' tag-container';
		cont.innerHTML= '';
		var ul= _createElement('ul');
		var input= _createElement('input');
		ul.className= 'tag-ul';
		ul.innerHTML = '<li class="dummy"><span class="text"></span><span class="cross">&#215;</span></li>'
		input.className= 'tag-input';
		cont.appendChild(ul);
		cont.appendChild(input);
		var elems= {
			ul: ul,
			input: input,
			dummy : ul.getElementsByClassName('dummy')[0]
		}
		_updatedConf.elems= elems;
	}

	// Binds events to input(generated by `generateInitialElements`) and container
	function _bindInitialEvents() {
		_bindInputEvents(_updatedConf.elems.input);
		_bindContainerEvents();
	}

	/**
	 * Input event for input box
	 * @param  {HTML Node} inputRef reference of input box generated by plugin.
	 */
	function _bindInputEvents(inputRef) {
		inputRef.addEventListener('keyup', function (e) {
			if(e.keyCode=== 13 || e.keyCode=== 32){
				var breakAtChar = _updatedConf.breakAt;
				if(inputRef.value.indexOf(breakAtChar) > 0){
					var tags = inputRef.value.split(breakAtChar);

					for(var i = 0, l = tags.length; i < l; i++){
						_addTag(tags[i]);
					}
				} else {
					_addTag(inputRef.value);
				}
				inputRef.value= '';
			}
		});
	}

	// Tag event lister(close tag and user defined events)
	function _bindTagEvents(tagRef) {
		tagRef.addEventListener('click', function (event) {
			if(event.target.className === 'cross'){
				tagRef.parentElement.removeChild(tagRef);
			} else {
				if(typeof _updatedConf.tagClick === "function"){
					_updatedConf.tagClick.call(tagRef);
				}
			}
		})
	}

	// Foucs on input box if clicked on container
	function _bindContainerEvents() {
		var container = _updatedConf.container;

		container.addEventListener('click', function (event) {
			if(event.target === event.currentTarget){
				_updatedConf.elems.input.focus();
			}
		});
	}

	// Adds tag
	function _addTag(tagValue) {
		var tag = _updatedConf.elems.dummy.cloneNode(true);

		tag.className= 'tag';
		tag.getElementsByClassName('text')[0].innerHTML= tagValue;
		_updatedConf.elems.ul.appendChild(tag);
		_bindTagEvents(tag)
	}

	// Check if {elem} is a valid HTML Node
	function _checkElem(elem) {
		try{
			return elem instanceof HTMLElement;
		}catch(err){
			return (typeof elem === "object") && (elem.nodeType===1) && (typeof elem.style === "object") && (typeof elem.ownerDocument ==="object");
		}
	}

	// Create and Return New HTML element.
	function _createElement(element) {
		return document.createElement(element);
	}
})(window)